# Telegram client configuration
telegram:
  api_id: <your API ID from https://my.telegram.org>
  api_hash: <your API hash from https://my.telegram.org>
  session_file: /path/to/your/client.session

  # Chat types which should be monitored
  chat_types:
    - contact # Users added as contact
    - user # Users not added as contact
    - group # Groups (including mega groups)
    - channel # Channels (excluding mega groups)

  # List of chats to monitor additionally to those specified using "chat_types"
  # The command "list-chats" can be used to get specific IDs
  additional_chats:
    - <id 1>
    - <id 2>
    - ...

outputs:
  # Send messages to Elasticsearch
  - type: elasticsearch
    host: http://your-elastic-host:9200

    # Username and password used to authenticate at Elasticsearch (optional)
    username: <Elasticsearch user>
    password: <Elasticsearch password>

    # Format of the index to use (will be passed to strftime)
    index_format: "telegram-%Y.%m.%d"

    # Specify your own output map to be used for each message
    # The key defines the target property
    # The value defines the Python code which should be executed to get the value for the property
    # The keys "id" and "date" are not used as they are automatically mapped to the "id" and "timestamp" fields respectively
    output_map:
      sender: "sender"
      chat: "get_display_name(await message.get_chat())"
      message: "message.text"

  # Append messages to a list in Redis
  - type: redis
    host: some-host
    port: 6379
    db: 0

    # Optionally specify username and password
    username: <Redis user>
    password: <Redis password>

    # Redis key into which the list should be stored
    # Each message is encoded as JSON and appended to that list using the `RPUSH` Redis command
    key: some_name

    # Specify your own output map to be used for each message
    # The key defines the target property
    # The value defines the Python code which should be executed to get the value for the property
    output_map:
      id: "message.id"
      date: "message.date"
      sender: "sender"
      chat: "get_display_name(await message.get_chat())"
      message: "message.text"

    # Send messages to any host using TCP (e.g. for using TCP input of Logstash)
  - type: tcp
    host: some-host
    port: 1234

    # Specify your own output map to be used for each message
    # The key defines the target property
    # The value defines the Python code which should be executed to get the value for the property
    output_map:
      id: "message.id"
      date: "message.date"
      sender: "sender"
      chat: "get_display_name(await message.get_chat())"
      message: "message.text"

    # Write messages to a file (in JSON format - one JSON object per line)
  - type: file
    path: /path/to/your/file.log

    # Specify your own output map to be used for each message
    # The key defines the target property
    # The value defines the Python code which should be executed to get the value for the property
    output_map:
      id: "message.id"
      date: "message.date"
      sender: "sender"
      chat: "get_display_name(await message.get_chat())"
      message: "message.text"